@page "/registro"
@using PoryectoSistemaTransporte.Client.Auth
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@using Blazored.Toast.Services
@using PoryectoSistemaTransporte.Shared.Request
@using PoryectoSistemaTransporte.Shared.Response
@inject IToastService ToastService


<div class="container">
    <dvi class="row justify-content-center">
        <div class="col-lg-8">
            <div class="card shadow-lg mt-5 " style="background: linear-gradient(90deg, rgba(31,63,89,1) 0%, rgba(37,67,89,1) 33%, rgba(31,63,89,1) 100%);">
                <div class="card-header">
                    <h3>Crear cuenta</h3>
                </div>
                <div class="card-body ">
                    <EditForm Model="Request" OnValidSubmit="ValidacionRegistro">
                        <DataAnnotationsValidator />
                    <div class="row">
                           
                            <div class="col-md-6 form-floating mb-3 ">
                                <input type="text" class="form-control" id="nombre" @bind-value="Request.NombreCompleto" autocomplete="off">
                                <label for="nombre" >Nombre Completo</label>
                            <ValidationMessage For="() => Request.NombreCompleto"></ValidationMessage>
                        </div>
                        <div class="col-md-6 form-floating mb-3">
                            <input type="date" class="form-control" id="fechaNacimiento" @bind-value="Request.FechaNacimiento" autocomplete="off" >
                            <label for="fechaNacimiento">Fecha Nacimiento</label>
                            <ValidationMessage For="() => Request.FechaNacimiento"></ValidationMessage>
                        </div>
                    </div>
                        <div class="row">
                            <div class="col-md-6 form-floating mb-3">
                                <input type="text" class="form-control" id="direccion" @bind-value="Request.Direccion" autocomplete="off">
                                <label for="direccion">Direccion</label>
                                <ValidationMessage For="() => Request.Direccion"></ValidationMessage>
                             </div>
                         <div class="col-md-6 form-floating mb-3">
                            <input type="text" class="form-control" id="telefono" @bind-value="Request.Telefono" autocomplete="off">
                            <label for="telefono">Telefono</label>
                            <ValidationMessage For="() => Request.Telefono"></ValidationMessage>
                        </div>
                    </div>
                     <div class="row">
                          <div class="col-md-6 form-floating mb-3">
                            <input type="text" class="form-control" id="preguntasecreta" @bind-value="Request.PreguntaSecreta" autocomplete="off">
                            <label for="preguntasecreta">Pregunta Secreta</label>
                            <ValidationMessage For="() => Request.PreguntaSecreta"></ValidationMessage>
                        </div>
                        <div class="col-md-6 form-floating mb-3">
                            <input type="text" class="form-control" id="respuestasecreta" @bind-value="Request.RespuestaSecreta" autocomplete="off">
                            <label for="respuestasecreta">Respuesta Secreta</label>
                            <ValidationMessage For="() => Request.RespuestaSecreta"></ValidationMessage>
                        </div>
                    </div>
                    <div class="row">
                         <div class="col-md-6 form-floating mb-3">
                             <input type="text" class="form-control" id="usuario" @bind-value="Request.NombreUsuario" autocomplete="off">
                              <label for="usuario">Usuario</label>
                              <ValidationMessage For="() => Request.NombreUsuario"></ValidationMessage>
                          </div>
                         <div class="col-md-6 form-floating mb-3">
                              <input type="email" class="form-control" id="email" @bind-value="Request.Email" autocomplete="off">
                              <label for="email">Email</label>
                              <ValidationMessage For="() => Request.Email"></ValidationMessage>
                         </div>
                     </div>
                     <div class="row">
                            <div class="col-md-6 form-floating mb-3">
                            <input type="password" class="form-control" id="password" @bind-value="Request.Password" autocomplete="off">
                            <label for="password">Clave</label>
                            <ValidationMessage For="() => Request.Password"></ValidationMessage>
                        </div>
                        <div class="col-md-6  form-floating mb-3">
                            <input type="password" class="form-control" id="confirmPassword" @bind-value="Request.ConfirmPassword" autocomplete="off">
                            <label for="confirmPassword">Confirmar Clave</label>
                            <ValidationMessage For="() => Request.ConfirmPassword"></ValidationMessage>
                        </div>
                      </div>
                        <div class="d-grid gap-1 mt-3">
                            <button class="btn btn-primary" type="submit">Crear cuenta</button>
                        </div>
                    </EditForm>
                </div>
                <div class="card-footer text-center py-3">
                    <div class="small">
                        <NavLink class="nav-link" href="login">¿Ya tienes una cuenta? Inicia sesion</NavLink>
                    </div>
                </div>
            </div>
        </div>
    </dvi>
</div>


@code {
    public RegistroUsuarioDTO Request { get; set; } = new();

    private async Task ValidacionRegistro()
    {
        try
        {
            var response = await HttpClient.PostAsJsonAsync("api/Users/Registro", Request);

            response.EnsureSuccessStatusCode();

            var registroresponse = await response.Content.ReadFromJsonAsync<BaseResponseDTO>();

            if(registroresponse!.Exito == false)
            {
                ToastService.ShowWarning(registroresponse.MensajeError!);
            }
            else
            {
                ToastService.ShowSuccess("Usuario registrado con exito");
                NavigationManager.NavigateTo("/login");
            }
        }
        catch(Exception ex)
        {
            ToastService.ShowError(ex.Message);
        }
    }
}
